# QT_WARP_CPP(outfiles inputfile ...)
macro (QT_WRAP_CPP outfiles )
  if(QT4_FOUND)
     QT4_WRAP_CPP(${outfiles} ${ARGN})
  else()
     QT5_WRAP_CPP(${outfiles} ${ARGN})
  endif()
endmacro()

# QT_WRAP_UI(outfiles inputfile ...)
macro (QT_WRAP_UI outfiles )
  if(QT4_FOUND)
     QT4_WRAP_UI(${outfiles} ${ARGN})
  else()
     QT5_WRAP_UI(${outfiles} ${ARGN})
  endif()  
endmacro()

# QT_ADD_RESOURCES(outfiles inputfile ... )
macro (QT_ADD_RESOURCES outfiles )
  if(QT4_FOUND)
     QT4_ADD_RESOURCES(${outfiles} ${ARGN})
  else()
     QT5_ADD_RESOURCES(${outfiles} ${ARGN})
  endif()
endmacro()

# QT_CREATE_TRANSLATION(outfiles inputfile ...)
macro(QT_CREATE_TRANSLATION _qm_files)
  if(QT4_FOUND)
     QT4_CREATE_TRANSLATION(${_qm_files} ${ARGN})
  else()
     QT5_CREATE_TRANSLATION(${_qm_files} ${ARGN})
  endif()
endmacro()

# QT_ADD_TRANSLATION(outfiles inputfile ...)
macro(QT_ADD_TRANSLATION _qm_files)
  if(QT4_FOUND)
     QT4_ADD_TRANSLATION(${_qm_files} ${ARGN})
  else()
     QT5_ADD_TRANSLATION(${_qm_files} ${ARGN})
  endif()
endmacro()

function(my_qt5_use_modules _target _link_type)
  if ("${_link_type}" STREQUAL "LINK_PUBLIC" OR "${_link_type}" STREQUAL "LINK_PRIVATE")
    set(modules ${ARGN})
    set(link_type ${_link_type})
  else()
    set(modules ${_link_type} ${ARGN})
  endif()
  QT5_USE_MODULES(${_target} ${modules})
endfunction()

function(my_qt4_use_modules _target _link_type)
  if ("${_link_type}" STREQUAL "LINK_PUBLIC" OR "${_link_type}" STREQUAL "LINK_PRIVATE")
    set(modules ${ARGN})
    set(link_type ${_link_type})
  else()
    set(modules ${_link_type} ${ARGN})
  endif()

  set(module_list )
  foreach(_module ${modules})
    if(${_module} STREQUAL "Widgets")
        list(APPEND module_list "Gui")
    elseif(${_module} STREQUAL "Concurrent")
        list(APPEND module_list "Core")
    elseif(${_module} STREQUAL "WebKitWidgets")
        list(APPEND module_list "WebKit")
    elseif(${_module} STREQUAL "PrintSupport")
        list(APPEND module_list "Gui")
    else()
        list(APPEND module_list ${_module})
    endif()
  endforeach()
  list(REMOVE_DUPLICATES module_list)
  foreach(_module ${module_list})
    string(TOUPPER ${_module} _ucmodule)
    set(_targetPrefix QT_QT${_ucmodule})
    if (_ucmodule STREQUAL QAXCONTAINER OR _ucmodule STREQUAL QAXSERVER)
      if (NOT QT_Q${_ucmodule}_FOUND)
        message(FATAL_ERROR "Can not use \"${_module}\" module which has not yet been found.")
      endif()
      set(_targetPrefix QT_Q${_ucmodule})
    else()
      if (NOT QT_QT${_ucmodule}_FOUND)
        message(FATAL_ERROR "Can not use \"${_module}\" module which has not yet been found.")
      endif()
      if ("${_ucmodule}" STREQUAL "MAIN")
        message(FATAL_ERROR "Can not use \"${_module}\" module with qt4_use_modules.")
      endif()
    endif()
    target_link_libraries(${_target} ${link_type} ${${_targetPrefix}_LIBRARIES})
    set_property(TARGET ${_target} APPEND PROPERTY INCLUDE_DIRECTORIES ${${_targetPrefix}_INCLUDE_DIR} ${QT_HEADERS_DIR} ${QT_MKSPECS_DIR}/default)
    set_property(TARGET ${_target} APPEND PROPERTY COMPILE_DEFINITIONS ${${_targetPrefix}_COMPILE_DEFINITIONS})
  endforeach()
endfunction()

function(qt_use_modules _target)
  if(QT4_FOUND)
     MY_QT4_USE_MODULES(${_target} ${ARGN})
  else()
     MY_QT5_USE_MODULES(${_target} ${ARGN})
  endif()
endfunction()

#! QT_MERGE_TRANSLATION(ts_out_file ts_in_file ...)
macro(QT_MERGE_TRANSLATION ts_out_file)
  get_filename_component(_directory ${ts_out_file} PATH)
  if(NOT EXISTS ${_directory})
    file(MAKE_DIRECTORY "${_directory}")
  endif()
  set(_module_list)
  foreach(_tsfile ${ARGN})
    get_filename_component(_ts_dir ${_tsfile} PATH)
    string(REPLACE "/" ";" _ts_dir ${_ts_dir})
    list(GET _ts_dir -2 _module)
    list(APPEND _module_list ${_module})
  endforeach()
  message(STATUS "Merging  Qt translation: ${_module_list}")
  execute_process(COMMAND ${QT_LCONVERT_EXECUTABLE} -o ${ts_out_file} ${ARGN} OUTPUT_QUIET)
endmacro()

#! QT_CREATE_OR_UPDATE_TRANSLATION(ts_out_file ts_in_file ...)
macro(QT_CREATE_OR_UPDATE_TRANSLATION ts_out_file)
  get_filename_component(_directory ${ts_out_file} PATH)
  if(NOT EXISTS ${_directory})
    file(MAKE_DIRECTORY "${_directory}")
  endif()
  if(EXISTS ${ts_out_file})
    message(STATUS "Updating Qt translation: ${ts_out_file}")
  else()
    message(STATUS "Creating Qt translation: ${ts_out_file}")
  endif()
  execute_process(COMMAND ${QT_LUPDATE_EXECUTABLE} ${ARGN} -ts ${ts_out_file}
               WORKING_DIRECTORY   ${CMAKE_CURRENT_SOURCE_DIR}
               OUTPUT_QUIET)
endmacro()
